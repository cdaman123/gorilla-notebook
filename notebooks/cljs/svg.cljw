;; gorilla-repl.fileformat = 2

;; **
;;; # PinkGorilla 
;;; 
;;; Shift + enter evaluates code. Hit alt+g twice in quick succession or click the menu icon (upper-right corner) for more commands.
;;; 
;;; It's a good habit to run each worksheet in its own namespace. We created a random namespace for you; you can keep using it.
;; **

;; @@ [cljs]
(pinkgorilla.ui.gorilla-renderable/render 15)
;; @@
;; ->
;;; [:error #error {:message "ERROR", :data {:tag :cljs/analysis-error}, :cause #object[Error Error: No protocol method Renderable.render defined for type number: 15]}] type: function cljs$core$ExceptionInfo(message,data,cause){
;;; var e = (new Error(message));
;;; var this$ = this;
;;; this$.message = message;
;;; 
;;; this$.data = data;
;;; 
;;; this$.cause = cause;
;;; 
;;; this$.name = e.name;
;;; 
;;; this$.description = e.description;
;;; 
;;; this$.number = e.number;
;;; 
;;; this$.fileName = e.fileName;
;;; 
;;; this$.lineNumber = e.lineNumber;
;;; 
;;; this$.columnNumber = e.columnNumber;
;;; 
;;; this$.stack = e.stack;
;;; 
;;; return this$;
;;; }
;; <-
;; =>
;;; ["^ ","~:type","html","~:content",["span","#error {:message \"ERROR\", :data {:tag :cljs/analysis-error}, :cause #object[Error Error: No protocol method Renderable.render defined for type number: 15]}"],"~:value","#error {:message \"ERROR\", :data {:tag :cljs/analysis-error}, :cause #object[Error Error: No protocol method Renderable.render defined for type number: 15]}"]
;; <=

;; @@ [cljs]
(pinkgorilla.ui.gorilla-renderable/render "h")
;; @@
;; ->
;;; [:ok {:type :html, :content "<span class='cljs-string'>&quot;h&quot;</span>", :value "\"h\""}] type: function (meta,cnt,arr,__hash){
;;; this.meta = meta;
;;; this.cnt = cnt;
;;; this.arr = arr;
;;; this.__hash = __hash;
;;; this.cljs$lang$protocol_mask$partition0$ = 16647951;
;;; this.cljs$lang$protocol_mask$partition1$ = 139268;
;;; }
;; <-
;; =>
;;; ["^ ","~:type","html","~:content",["span","{:type :html, :content \"<span class='cljs-string'>&quot;h&quot;</span>\", :value \"\\\"h\\\"\"}"],"~:value","{:type :html, :content \"<span class='cljs-string'>&quot;h&quot;</span>\", :value \"\\\"h\\\"\"}"]
;; <=

;; @@ [cljs]
(pinkgorilla.kernel.cljs-tools/r! [:h1 "super"])
;; @@
;; ->
;;; [:ok {:value-response {:type "reagent", :content [:h1 "super"]}}] type: function (meta,cnt,arr,__hash){
;;; this.meta = meta;
;;; this.cnt = cnt;
;;; this.arr = arr;
;;; this.__hash = __hash;
;;; this.cljs$lang$protocol_mask$partition0$ = 16647951;
;;; this.cljs$lang$protocol_mask$partition1$ = 139268;
;;; }
;; <-
;; =>
;;; ["^ ","~:type","html","~:content",["span","{:value-response {:type \"reagent\", :content [:h1 \"super\"]}}"],"~:value","{:value-response {:type \"reagent\", :content [:h1 \"super\"]}}"]
;; <=

;; @@ [clj]
; SVG WITH STATIC PATH
<svg viewBox="-10 -10 116 111">
  <path fill="#bbb" d="
    M0,0
    h7.75
    a45.5,45.5 0 1 1 0,91
    h-7.75
    v-20
    h7.75
    a25.5,25.5 0 1 0 0,-51
    h-7.75
    z
    m36.2510,0
    h32
    a27.75,27.75 0 0 1 21.331,45.5
    a27.75,27.75 0 0 1 -21.331,45.5
    h-32
    a53.6895,53.6895 0 0 0 18.7464,-20
    h13.2526
    a7.75,7.75 0 1 0 0,-15.5
    h-7.75
    a53.6895,53.6895 0 0 0 0,-20
    h7.75
    a7.75,7.75 0 1 0 0,-15.5
    h-13.2526
    a53.6895,53.6895 0 0 0 -18.7464,-20
    z
  "/>

  <g fill="none" stroke="currentColor" stroke-width="0.15" stroke-opacity="0.3">
    <line x1="-100" x2="200" y1="0" y2="0"/>
    <line x1="-100" x2="200" y1="20" y2="20"/>
    <line x1="-100" x2="200" y1="35.5" y2="35.5"/>
    <line x1="-100" x2="200" y1="45.5" y2="45.5"/>
    <line x1="-100" x2="200" y1="55.5" y2="55.5"/>
    <line x1="-100" x2="200" y1="71" y2="71"/>
    <line x1="-100" x2="200" y1="91" y2="91"/>
    <line x1="0" x2="0" y1="-100" y2="200"/>
    <line x1="7.75" x2="7.75" y1="-100" y2="200"/>
    <line x1="60.5" x2="60.5" y1="-100" y2="200"/> <!-- XXX  -->
    <line x1="68.25" x2="68.25" y1="-100" y2="200"/>
    <line x1="96" x2="96" y1="-100" y2="200"/>
  </g>

  <g fill="blue">
    <circle cx="7.75" cy="45.5" r=".5"/>
    <circle cx="68.25" cy="27.75" r=".5"/>
    <circle cx="68.25" cy="63.25" r=".5"/>
  </g>

  <g fill="red">
    <!-- Intersecting horizontal lines with the r=53.6895 circle. -->
    <circle cx="36.2510" cy="0" r=".5"/>
    <circle cx="54.9974" cy="20" r=".5"/>
    <circle cx="60.5" cy="35.5" r=".5"/>
    <circle cx="60.5" cy="55.5" r=".5"/>
    <circle cx="54.9974" cy="71" r=".5"/>
    <circle cx="36.2510" cy="91" r=".5"/>

    <!-- Intersecting the two r=27.75 circles. -->
    <circle cx="89.5807" cy="45.5" r=".5"/>
  </g>

  <g fill="none" stroke="currentColor" stroke-width="0.15">
    <circle cx="7.75" cy="45.5" r="25.5"/>
    <circle cx="7.75" cy="45.5" r="45.5"/>
    <!-- Radius is computed to intersect at the intended x=60.5. -->
    <circle cx="7.75" cy="45.5" r="53.6895"/>
    <circle cx="68.25" cy="27.75" r="7.75"/>
    <circle cx="68.25" cy="27.75" r="27.75"/>
    <circle cx="68.25" cy="63.25" r="7.75"/>
    <circle cx="68.25" cy="63.25" r="27.75"/>
  </g>
</svg>`

;; @@
;; ->
;;; 
;; <-

;; @@ [clj]
(defn mid-point [p1 p2]
  (map #(/ (+ % %2) 2) p1 p2))

(defn next-triangles [[top left right]]
  [[top (mid-point top left) (mid-point top right)]
   [(mid-point left top) left (mid-point left right)]
   [(mid-point right top) (mid-point left right) right]])

(def canvas (js/document.getElementById "render"))
(doto (.getContext canvas "2d")
  (aset "strokeStyle" "black")
  (.clearRect 0 0 (.-width canvas) (.-height canvas)))

(defn draw-triangle [canvas [[x1 y1] [x2 y2] [x3 y3]]]
  (doto (.getContext canvas "2d")
    (.beginPath)
    (.moveTo x1 y1)
    (.lineTo x2 y2)
    (.lineTo x3 y3)
    (.lineTo x1 y1)
    (.stroke)
    (.closePath)))

(defn draw-sierp [canvas initial n]
  (when (> n 0)
    (doseq [triangle (next-triangles initial)]
      (draw-triangle canvas triangle)
      (draw-sierp canvas triangle (dec n)))))

(draw-sierp canvas [[0 500] [250 0] [500 500]] 6)

;; @@
;; ->
;;; 
;; <-

;; @@ [clj]
; QUIL demo

(ns qil-demo 
  (:require 
    [reagent.core :as reagent :refer [atom]] 
    [quil.core :as q :include-macros true] 
    [quil.middleware :as m])) 

(def w 400) 
(def h 400) 
(defn setup [] {:t 1}) 
(defn update [state] (update-in state [:t] inc)) 
(defn draw [state] 
  (q/background 255) 
  (q/fill 0) 
  (q/ellipse (rem (:t state) w) 46 55 55)) 

(q/defsketch foo :setup setup :update update :draw draw :host "foo" :no-start true :middleware [m/fun-mode] :size [w h]) 

(defn hello-world [] 
  (reagent/create-class 
    {:reagent-render (fn [] [:canvas#foo {:width w :height h}]) 
     :component-did-mount foo})) 

(reagent/render-component [hello-world] (. js/document (getElementById "app")))

;; @@
;; ->
;;; 
;; <-

;; @@ [clj]
https://github.com/reagent-project/reagent-cookbook/tree/master/recipes/canvas-fills-div
http://lambdafunk.com/2017-03-30-Interactive-Sierpinski-Triangle/
https://github.com/stathissideris/dali
https://stackoverflow.com/questions/33345084/quil-sketch-on-a-reagent-canvas

https://github.com/reagent-project/reagent-cookbook/tree/master/recipes/canvas-fills-div
https://wiki.sagemath.org/interact/fractal
http://lambdafunk.com/2017-02-16-Random-Polygons/

;; @@
;; ->
;;; 
;; <-
